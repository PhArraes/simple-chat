version: '2'
services:
  db:
    container_name: mongo
    image: mongo
    environment:
      - MONGO_INITDB_DATABASE=default-db
    ports:
      - 27017:27017
    volumes:
      - ~/volumes/mongo/db:/data/db
    restart: always
  zookeeper:
    image: zookeeper:3.4.9
    # ZooKeeper is designed to "fail-fast", so it is important to allow it to
    # restart automatically.
    restart: unless-stopped
    hostname: zookeeper
    # We'll expose the ZK client port so that we can connect to it from our applications.
    ports:
      - "2181:2181"
    volumes:
      - ./volumes/zookeeper/data:/data
      - ./volumes/zookeeper/datalog:/datalog
  kafka:
    image: confluentinc/cp-kafka:4.1.0
    hostname: kafka
    ports:
      - "9092:9092"
    environment:
      # Required. Kafka will publish this address to ZooKeeper so clients know
      # how to get in touch with Kafka. "PLAINTEXT" indicates that no authentication
      # mechanism will be used.
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      # Required. Instructs Kafka how to get in touch with ZooKeeper.
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      # Required when running in a single-node cluster, as we are. We would be able to take the default if we had
      # three or more nodes in the cluster.
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - ./volumes/kafka/data:/var/lib/kafka/data
    # As Kafka relies upon ZooKeeper, this will instruct docker to wait until the zookeeper service
    # is up before attempting to start Kafka.
    depends_on:
      - zookeeper
  server:
    build: ./simple-chat-server/.
    environment:
      HOST_IP: "kafka"
    ports:
      - "3001:3001"
    depends_on:
      - kafka
  web:
    build: ./simple-chat-client/.
    ports:
      - "80:80"
    depends_on:
      - kafka
  identity:
    build: ./simple-chat-identity/.
    ports:
      - "3002:3002"
    depends_on:
      - kafka
  gateway:
    build: ./simple-chat-gateway/.
    ports:
      - "8080:8080"
    depends_on:
      - kafka
  log_client:
    build: ./simple-chat-log-client/.
    environment:
      HOST_IP: "kafka"
    ports:
      - "3003:3003"
    depends_on:
      - kafka







  # # Browse Kafka topics and understand what's happening on your cluster.
  # # Find topics / view topic metadata / browse topic data
  # # (kafka messages) / view topic configuration / download data.
  # # https://github.com/Landoop/kafka-topics-ui
  # kafka-topics-ui:
  #   image: landoop/kafka-topics-ui:0.9.3
  #   hostname: kafka-topics-ui
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     # Required. Instructs the UI where it can find the Kafka REST Proxy.
  #     KAFKA_REST_PROXY_URL: "http://kafka-rest-proxy:8082/"
  #     # This instructs the docker image to use Caddy to proxy traffic to kafka-topics-ui.
  #     PROXY: "true"
  #   # kafka-topics-ui relies upon Kafka REST.
  #   # This will instruct docker to wait until those services are up
  #   # before attempting to start kafka-topics-ui.
  #   depends_on:
  #     - kafka-rest-proxy